##Description:
You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

##Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

##Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

##Code:
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        sum = 0
        root = curr = ListNode(0)
        while l1 or l2 or sum:
            if l1: 
                sum += l1.val
                l1 = l1.next
            if l2: 
                sum += l2.val 
                l2 = l2.next
            curr.next = curr = ListNode(sum % 10)
            sum //= 10
        return root.next
